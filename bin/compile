#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

set -eo pipefail

export BUILDPACK_DEBUG="yes"

if [ -n "${BUILDPACK_DEBUG}" ]
then
    set -x
fi

readonly build_dir="${1}"
readonly cache_dir="${2}"
readonly env_dir="${3}"

readonly base_dir="$( cd -P "$( dirname "$0" )" && pwd )"
readonly buildpack_dir="$( readlink -f "${base_dir}/.." )"


version="${VERSION:-stable}"
build_flags="${RUST_CARGO_BUILD_FLAGS:-"--release"}"
build_path="${RUST_BUILD_PATH:-""}"


# Load toolchain configuration, if any:
if [ -f "${build_dir}/rust-toolchain" ]; then
    version="$( cat "${build_dir}/rust-toolchain" )"
fi

# Load configuration variables, if any:
if [ -f "${build_dir}/RustConfig" ]; then
    source "${build_dir}/RustConfig"
fi


rust_update() {
    local version="${1}"

    echo "-----> Checking for new releases of Rust ${version} channel"

    rustup self update \
        && rustup update "${version}" \
        && rustup default "${version}"
}

rust_setup() {
    echo "-----> Downloading rustup"
    curl --retry 3 --silent --location "https://sh.rustup.rs" \
        --output "rustup.sh"
    chmod u+x "rustup.sh"

    echo "-----> Installing Rust ${version} channel using rustup"
    ./rustup.sh -y --default-toolchain "${version}"
    rm rustup.sh
}


cat <<EOF > "${buildpack_dir}/export"
export RUSTUP_HOME="${cache_dir}/multirust"
export CARGO_HOME="${cache_dir}/cargo"
PATH="\$CARGO_HOME/bin:\$PATH"
EOF

source "${buildpack_dir}/export"


pushd "${cache_dir}" > /dev/null

rust_update || rust_setup

if [ ! -x "${CARGO_HOME}/bin/rustc" ]; then
  echo "failed: Cannot find Rust binaries at ${CARGO_HOME}"
  exit 1
fi

popd


if [ -v "${RUST_SKIP_BUILD}" ]; then
    echo "-----> Skipping Cargo build"
else
    # Build the project and copy it back to the source tree.
    # Watch https://github.com/rust-lang/cargo/issues/6790 and the `--out-dir`
    # option for a potential, future, easier way to do this.
    echo "-----> Building application using Cargo"

    pushd "${build_dir}/${build_path}" > /dev/null

    rm --recursive --force "target"
    mkdir -p "target/release"

    target_dir="${CARGO_TARGET_DIR:-"${cache_dir}/target"}"

    if [ -n "${BUILDPACK_DEBUG}" ]; then
        cargo build ${build_flags} --target-dir "${target_dir}" --verbose
    else
        cargo build ${build_flags} --target-dir "${target_dir}" --quiet
    fi

    find "${target_dir}/release" -maxdepth 2 -type f -executable \
        -exec cp --verbose --target-directory="target/release" {} \;

    popd
fi

echo "Done."
