#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

set -eo pipefail

export BUILDPACK_DEBUG="yes"

if [ -n "${BUILDPACK_DEBUG}" ]
then
    set -x
fi

readonly build_dir="${1}"
readonly cache_dir="${2}"
readonly env_dir="${3}"

readonly base_dir="$( cd -P "$( dirname "$0" )" && pwd )"
readonly buildpack_dir="$( readlink -f "${base_dir}/.." )"


version="${VERSION:-stable}"

# Load toolchain configuration, if any:
if [ -f "${build_dir}/rust-toolchain" ]; then
    version="$(cat "${build_dir}/rust-toolchain" )"
fi

# Load configuration variables, if any:
if [ -f "${build_dir}/RustConfig" ]; then
    source "${build_dir}/RustConfig"
fi


build_flags="${RUST_CARGO_BUILD_FLAGS:-"--release"}"
build_path="${RUST_BUILD_PATH:-""}"


RUSTUP_HOME="${cache_dir}/multirust"
export RUSTUP_HOME

CARGO_HOME="${cache_dir}/cargo"
export CARGO_HOME

PATH="$CARGO_HOME/bin:$PATH"
export PATH


pushd "${cache_dir}" > /dev/null

if [ -d "${CARGO_HOME}" ]; then
    echo "-----> Checking for new releases of Rust ${version} channel"
    # It's possible that $version has changed,
    # or that the `stable` channel has been updated.
    rustup self update
    rustup update "${version}"
    rustup default "${version}"
else
    echo "-----> Downloading rustup"
    curl --retry 3 --silent --location "https://sh.rustup.rs" \
        --output "rustup.sh"
    chmod u+x "rustup.sh"

    echo "-----> Installing Rust channel ${version} using rustup"
    ./rustup.sh -y --default-toolchain "${version}"
    rm rustup.sh
fi

if [ ! -x "${CARGO_HOME}/bin/rustc" ]; then
  echo "failed: Cannot find Rust binaries at ${CARGO_HOME}"
  exit 1
fi

popd


if [ -v "${RUST_SKIP_BUILD}" ]; then
    echo "-----> Skipping Cargo build"
else
    # Build the project (into CARGO_TARGET_DIR so we have caching) and copy it
    # back to the source tree.  In theory, we could probably just copy the
    # binary or do something clever with `cargo install`, but we haven't
    # figured that out yet.
    #
    # To debug git issues:
    #export RUST_LOG="cargo::sources::git=debug"
    # To debug compiler and linking issues, add `--verbose`.
    echo "-----> Building application using Cargo"

    target_dir="${RUST_CARGO_TARGET_DIR:-"${cache_dir}/target"}"

    CARGO_TARGET_DIR="${target_dir}"
    export CARGO_TARGET_DIR


    pushd "${build_dir}/${build_path}" > /dev/null

    rm -rf "target"

    cargo build ${build_flags}
    mkdir -p "target/release"

    find "${CARGO_TARGET_DIR}/release" -maxdepth 1 -type f -executable \
        -exec cp -a -t target/release {} \;

    popd
fi


# TODO: Export environment for later buildpacks
export | grep -E -e ' (PATH|LD_LIBRARY_PATH|LIBRARY_PATH|INCLUDE_PATH|CPATH|CPPPATH|PKG_CONFIG_PATH)=' > "${buildpack_dir}/export"
